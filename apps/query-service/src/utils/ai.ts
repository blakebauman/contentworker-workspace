import type { Env } from '../context'
import type { AIChoicesResponse, AIMessageResponse } from '../types'

/**
 * Generate AI response using Workers AI
 */
export async function generateAIResponse(
	query: string,
	context: string,
	env: Env
): Promise<string> {
	const prompt = `Based on the following context, please answer the user's question accurately and concisely.

Context:
${context}

Question: ${query}

Answer:`

	// Mock AI response for local development
	if (!env.AI || typeof env.AI.run !== 'function') {
		console.warn('Workers AI not available - using mock response for development')
		return `This is a mock AI response for the query: "${query}". In a real implementation, this would be generated by Workers AI based on the provided context.`
	}

	const aiResponse = await env.AI.run('@cf/meta/llama-3.1-8b-instruct', {
		messages: [
			{
				role: 'system',
				content:
					'You are a helpful assistant that answers questions based on provided context. Be accurate and cite sources when possible.',
			},
			{
				role: 'user',
				content: prompt,
			},
		],
	})

	// Extract the response text
	let response: string
	if (aiResponse && typeof aiResponse === 'object' && 'response' in aiResponse) {
		response = (aiResponse as AIMessageResponse).response
	} else if (aiResponse && typeof aiResponse === 'object' && 'choices' in aiResponse) {
		const choices = (aiResponse as AIChoicesResponse).choices
		if (Array.isArray(choices) && choices.length > 0 && choices[0].message?.content) {
			response = choices[0].message.content
		} else {
			throw new Error('AI response failed: No content in choices')
		}
	} else {
		throw new Error(`AI response failed: Unexpected response format: ${typeof aiResponse}`)
	}

	if (!response || typeof response !== 'string') {
		throw new Error('AI response failed: Empty or invalid response')
	}

	return response.trim()
}
